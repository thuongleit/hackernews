/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * The file has been modified
 * Modifications copyright (C) 2018 Thuong Le
 */

/**
* Shared file between builds so that they can all use the same dependencies and
* maven repositories.
**/

ext.deps = [:]

def deps = [:]

def build_versions = [:]
build_versions.min_sdk = 16
build_versions.target_sdk = 26
build_versions.build_tools = "27.0.3"
ext.build_versions = build_versions

def versions = [:]
versions.arch_core = "1.1.1"
versions.room = "1.1.1"
versions.lifecycle = "1.1.1"
versions.support = "27.1.1"
versions.dagger = "2.15"
versions.junit = "4.12"
versions.espresso = "3.0.1"
versions.retrofit = "2.3.0"
versions.mockwebserver = "3.8.1"
versions.apache_commons = "2.5"
versions.mockito = "2.7.19"
versions.mockito_all = "1.10.19"
versions.dexmaker = "2.2.0"
versions.constraint_layout = "1.0.2"
versions.glide = "4.7.1"
versions.timber = "4.5.1"
versions.android_gradle_plugin = '3.3.0-alpha03'
versions.google_services = "4.0.2"
versions.fabric_plugin = "1.25.4"
versions.crashlytics = "2.9.4"
versions.firebase = "16+"
versions.rxjava2 = "2.1.9"
versions.rx_android = "2.0.1"
versions.rx_kotlin = "2.2.0"
versions.atsl_runner = "1.0.1"
versions.atsl_rules = "1.0.1"
versions.hamcrest = "1.3"
versions.kotlin = "1.2.51"
versions.paging = "1.0.0"
versions.work = "1.0.0-alpha03"
versions.navigation = "1.0.0-alpha01"
versions.leakcanary = "1.5.4"
versions.okhttp_logging_interceptor = "3.9.0"
versions.stetho = "1.5.0"

def support = [:]
support.annotations = "com.android.support:support-annotations:$versions.support"
support.app_compat = "com.android.support:appcompat-v7:$versions.support"
support.recyclerview = "com.android.support:recyclerview-v7:$versions.support"
support.cardview = "com.android.support:cardview-v7:$versions.support"
support.design = "com.android.support:design:$versions.support"
support.v4 = "com.android.support:support-v4:$versions.support"
support.core_utils = "com.android.support:support-core-utils:$versions.support"
support.vector_drawable = "com.android.support:support-vector-drawable:$versions.support"
deps.support = support

def room = [:]
room.runtime = "android.arch.persistence.room:runtime:$versions.room"
room.compiler = "android.arch.persistence.room:compiler:$versions.room"
room.rxjava2 = "android.arch.persistence.room:rxjava2:$versions.room"
room.testing = "android.arch.persistence.room:testing:$versions.room"
deps.room = room

def lifecycle = [:]
lifecycle.runtime = "android.arch.lifecycle:runtime:$versions.lifecycle"
lifecycle.extensions = "android.arch.lifecycle:extensions:$versions.lifecycle"
lifecycle.java8 = "android.arch.lifecycle:common-java8:$versions.lifecycle"
lifecycle.compiler = "android.arch.lifecycle:compiler:$versions.lifecycle"
deps.lifecycle = lifecycle

def arch_core = [:]
arch_core.testing = "android.arch.core:core-testing:$versions.arch_core"
deps.arch_core = arch_core

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
retrofit.rxjava2 = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
deps.retrofit = retrofit

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

def espresso = [:]
espresso.core = "com.android.support.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "com.android.support.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "com.android.support.test.espresso:espresso-intents:$versions.espresso"
deps.espresso = espresso

def atsl = [:]
atsl.runner = "com.android.support.test:runner:$versions.atsl_runner"
atsl.rules = "com.android.support.test:rules:$versions.atsl_runner"
deps.atsl = atsl

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.all = "org.mockito:mockito-all:$versions.mockito_all"
deps.mockito = mockito

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
deps.kotlin = kotlin

deps.paging = "android.arch.paging:runtime:$versions.paging"
ext.deps = deps

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"
deps.constraint_layout = "com.android.support.constraint:constraint-layout:$versions.constraint_layout"
deps.timber = "com.jakewharton.timber:timber:$versions.timber"
deps.junit = "junit:junit:$versions.junit"
deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"
deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"
ext.deps = deps

def rx = [:]
rx.core = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"
rx.android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"
rx.kotlin = "io.reactivex.rxjava2:rxkotlin:$versions.rx_kotlin"
deps.rx = rx

def work = [:]
work.runtime = "android.arch.work:work-runtime:$versions.work"
work.testing = "android.arch.work:work-testing:$versions.work"
work.firebase = "android.arch.work:work-firebase:$versions.work"
work.runtime_ktx = "android.arch.work:work-runtime-ktx:$versions.work"
deps.work = work

def navigation = [:]
navigation.runtime = "android.arch.navigation:navigation-runtime:$versions.navigation"
navigation.runtime_ktx = "android.arch.navigation:navigation-runtime-ktx:$versions.navigation"
navigation.fragment = "android.arch.navigation:navigation-fragment:$versions.navigation"
navigation.fragment_ktx = "android.arch.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.navigation_ui_ktx = "android.arch.navigation:navigation-ui-ktx:$versions.navigation"
navigation.safe_args_plugin = "android.arch.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
navigation.testing_ktx = "android.arch.navigation:navigation-testing-ktx:$versions.navigation"
deps.navigation = navigation

def debug = [:]
debug.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:$versions.okhttp_logging_interceptor"
debug.stetho = "com.facebook.stetho:stetho:$versions.stetho"
debug.stetho_okhttp = "com.facebook.stetho:stetho-okhttp3:$versions.stetho"
debug.leakcanary = "com.squareup.leakcanary:leakcanary-android:$versions.leakcanary"
deps.debug = debug

def firebase = [:]
firebase.core = "com.google.firebase:firebase-core:$versions.firebase"
firebase.database = "com.google.firebase:firebase-database::$versions.firebase"
firebase.firestore = "com.google.firebase:firebase-firestore:$versions.firebase"
firebase.storage = "com.google.firebase:firebase-storage:$versions.firebase"
firebase.crash = "com.google.firebase:firebase-crash:$versions.firebase"
firebase.auth = "com.google.firebase:firebase-auth:$versions.firebase"
firebase.messaging = "com.google.firebase:firebase-messaging:$versions.firebase"
firebase.config = "com.google.firebase:firebase-config:$versions.firebase"
firebase.invites = "com.google.firebase:firebase-invites:$versions.firebase"
firebase.ads = "com.google.firebase:firebase-ads:$versions.firebase"
firebase.appindexing = "com.google.firebase:firebase-appindexing:$versions.firebase"
firebase.perf = "com.google.firebase:firebase-perf:$versions.firebase"
firebase.functions = "com.google.firebase:firebase-functions:$versions.firebase"
firebase.ml_vision = "com.google.firebase:firebase-ml-vision:$versions.firebase"
firebase.ml_model_interpreter = "com.google.firebase:firebase-ml-model-interpreter:$versions.firebase"
deps.firebase = firebase

deps.google_services_plugin = "com.google.gms:google-services:$versions.google_services"
deps.fabric_plugin = "io.fabric.tools:gradle:$versions.fabric_plugin"
deps.crashlytics = "com.crashlytics.sdk.android:crashlytics:$versions.crashlytics"

ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    handler.maven { url 'https://maven.fabric.io/public' }
}
ext.addRepos = this.&addRepos
